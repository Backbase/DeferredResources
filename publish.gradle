// Applied per published module
//  The module must define ext.artifactName and ext.publishedDescription

group = rootProject.ext.publishGroup
version = rootProject.ext.libraryVersion

apply plugin: 'io.gitlab.arturbosch.detekt'
detekt {
    reports {
        html.enabled = true
        sarif.enabled = true
        sarif.destination = new File("$rootProject.projectDir/build/detekt/sarif/${project.name}.sarif")
    }
    config = objects.fileCollection().from "${rootProject.projectDir}/detekt.yml"
}
tasks.detekt.jvmTarget = JavaVersion.VERSION_1_8

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from android.sourceSets.main.java.srcDirs
}

apply plugin: 'org.jetbrains.dokka'
dokkaGfm {
    outputDirectory.set new File("$rootDir/docs/1.x")
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set 'javadoc'
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven-publish'
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId group
                artifactId artifactName
                version version

                from components.release
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = artifactName
                    description = publishedDescription

                    url = 'https://github.com/Backbase/DeferredResources'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name = 'Backbase R&D B.V.'
                            email = 'oss@backbase.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/Backbase/DeferredResources.git'
                        developerConnection = 'scm:git:ssh://github.com/Backbase/DeferredResources.git'
                        url = 'https://github.com/Backbase/DeferredResources'
                    }
                }
            }
        }

        repositories {
            maven {
                name = 'MavenCentral'

                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                def sonatypeUsername = findProperty('backbaseOssSonatypeUsername')
                def sonatypePassword = findProperty('backbaseOssSonatypePassword')
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

apply plugin: 'signing'
signing {
    def key = findProperty('backbaseOssGpgKey')
    def password = findProperty('backbaseOssGpgPassword')
    useInMemoryPgpKeys(key, password)
    sign publishing.publications
}
